import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Redirect, useLocation } from "wouter";

const loginSchema = z.object({
  username: z.string().min(1, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  password: z.string().min(1, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å"),
});

const registerSchema = z.object({
  username: z.string().min(3, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"),
  password: z.string().min(6, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"),
});

export default function AuthPage() {
  const { user, loginMutation, registerMutation } = useAuth();
  const [, setLocation] = useLocation();
  
  const loginForm = useForm<z.infer<typeof loginSchema>>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  const registerForm = useForm<z.infer<typeof registerSchema>>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  // –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤
  if (user) {
    return <Redirect to="/" />;
  }

  function onLoginSubmit(values: z.infer<typeof loginSchema>) {
    loginMutation.mutate(values, {
      onSuccess: () => {
        setLocation("/");
      },
    });
  }

  function onRegisterSubmit(values: z.infer<typeof registerSchema>) {
    registerMutation.mutate(values, {
      onSuccess: () => {
        setLocation("/");
      },
    });
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background p-4">
      <div className="w-full max-w-5xl grid gap-6 lg:grid-cols-2">
        <div className="flex flex-col justify-center space-y-6">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
            <p className="text-muted-foreground mt-2">
              –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤
            </p>
          </div>

          <Tabs defaultValue="login" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">–í—Ö–æ–¥</TabsTrigger>
              <TabsTrigger value="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
            </TabsList>
            <TabsContent value="login">
              <Card>
                <CardHeader>
                  <CardTitle>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</CardTitle>
                  <CardDescription>
                    –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...loginForm}>
                    <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                      <FormField
                        control={loginForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</FormLabel>
                            <FormControl>
                              <Input placeholder="admin" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={loginForm.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                            <FormControl>
                              <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button 
                        type="submit" 
                        className="w-full bg-orange hover:bg-orange/90" 
                        disabled={loginMutation.isPending}
                      >
                        {loginMutation.isPending ? (
                          <div className="flex items-center">
                            <span className="animate-spin mr-2">‚óå</span> –í—Ö–æ–¥...
                          </div>
                        ) : (
                          "–í–æ–π—Ç–∏"
                        )}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
                <CardFooter className="flex justify-center text-sm text-muted-foreground">
                  <p>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: admin / admin</p>
                </CardFooter>
              </Card>
            </TabsContent>
            <TabsContent value="register">
              <Card>
                <CardHeader>
                  <CardTitle>–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</CardTitle>
                  <CardDescription>
                    –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Form {...registerForm}>
                    <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                      <FormField
                        control={registerForm.control}
                        name="username"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</FormLabel>
                            <FormControl>
                              <Input placeholder="newuser" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={registerForm.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                            <FormControl>
                              <Input type="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button 
                        type="submit" 
                        className="w-full bg-orange hover:bg-orange/90" 
                        disabled={registerMutation.isPending}
                      >
                        {registerMutation.isPending ? (
                          <div className="flex items-center">
                            <span className="animate-spin mr-2">‚óå</span> –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...
                          </div>
                        ) : (
                          "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
                        )}
                      </Button>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        <div className="hidden lg:flex lg:flex-col lg:justify-center lg:rounded-lg lg:bg-muted lg:p-8">
          <div className="space-y-6 text-center">
            <div className="mx-auto h-24 w-24 text-4xl flex items-center justify-center rounded-full bg-orange/10 text-orange">
              üìù
            </div>
            <div className="space-y-2">
              <h2 className="text-2xl font-semibold">–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤</h2>
              <p className="text-muted-foreground">
                –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò.
                –ü—Ä–æ—Å—Ç–æ–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
              </p>
            </div>
            <div className="space-y-4">
              <div className="flex items-center justify-center space-x-2">
                <div className="h-1 w-1 rounded-full bg-orange"></div>
                <div className="text-sm text-muted-foreground">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</div>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <div className="h-1 w-1 rounded-full bg-orange"></div>
                <div className="text-sm text-muted-foreground">–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Ç–µ–≥–∞–º</div>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <div className="h-1 w-1 rounded-full bg-orange"></div>
                <div className="text-sm text-muted-foreground">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion</div>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <div className="h-1 w-1 rounded-full bg-orange"></div>
                <div className="text-sm text-muted-foreground">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}